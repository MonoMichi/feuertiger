stages:
    - Prepare
    - Build
    - Deploy

variables:
    DEV_ENVIRONMENT_IMAGE_TAG: $CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/dev-environment:latest

Prepare:
    stage: Prepare
    interruptible: true
    tags:
        - docker
    image: docker:latest
    services:
        - docker:dind
    before_script:
        - docker info
        - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    only:
        changes:
            - .dev-env.Dockerfile
    script:
        - docker pull $DEV_ENVIRONMENT_IMAGE_TAG || true
        - docker build --cache-from $DEV_ENVIRONMENT_IMAGE_TAG -t $DEV_ENVIRONMENT_IMAGE_TAG --file .dev-env.Dockerfile .
        - docker push $DEV_ENVIRONMENT_IMAGE_TAG

Build:
    stage: Build
    interruptible: true
    tags:
        - docker
    image: $DEV_ENVIRONMENT_IMAGE_TAG
    cache:
        key: '$CI_JOB_NAME-$CI_COMMIT_REF_SLUG'
    before_script:
        - |
            $CI_COMMIT_REF_PROTECTED 
                && git remote set-url origin "https://${CI_JOB_USER_PROTECTED}:${CI_JOB_TOKEN_PROTECTED}@${CI_REPOSITORY_URL#*@}" 
                || git remote set-url origin "https://${GITLAB_USER_NAME}@${CI_REPOSITORY_URL#*@}"
        - git config --global user.name "${GITLAB_USER_NAME}"
        - git config --global user.email "${GITLAB_USER_EMAIL}"
    script:
        - git checkout ${CI_COMMIT_BRANCH}
        - yarn
        # TODO: format all globals and packages based on lerna run --since
        # - yarn format
        # - git diff-index --quiet HEAD || git status
        # - git diff-index --quiet HEAD || git commit -am "format"
        - yarn build
        - yarn linkdist
        # TODO: lint based on lerna run --since
        # - yarn lint
        # - git diff-index --quiet HEAD || git status
        # - git diff-index --quiet HEAD || git commit -am "fix"
        # - yarn test --since
        - npm config set '//gitlab.com/api/v4/projects/${CI_PROJECT_ID}/packages/npm/:_authToken' "${CI_JOB_TOKEN}"
        - lerna publish prerelease --no-push --yes --exact --no-git-reset --preid=${CI_COMMIT_BRANCH}.${CI_COMMIT_SHORT_SHA} --registry=//gitlab.com/api/v4/projects/${CI_PROJECT_ID}/packages/npm/
        - git remote show origin
        - git push -o ci.skip
# Deploy:
#     stage: Deploy
#     interruptible: true
#     tags:
#         - docker
#     image: $DEV_ENVIRONMENT_IMAGE_TAG
#     variables:
#     #     NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#     #     FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
#     #     FIREBASE_SECRETS_TYPE: ${{ secrets.FIREBASE_SECRETS_TYPE }}
#     #     FIREBASE_SECRETS_PROJECT_ID: ${{ secrets.FIREBASE_SECRETS_PROJECT_ID }}
#     #     FIREBASE_SECRETS_PRIVATE_KEY_ID: ${{ secrets.FIREBASE_SECRETS_PRIVATE_KEY_ID }}
#     #     FIREBASE_SECRETS_PRIVATE_KEY: ${{ secrets.FIREBASE_SECRETS_PRIVATE_KEY }}
#     #     FIREBASE_SECRETS_CLIENT_EMAIL: ${{ secrets.FIREBASE_SECRETS_CLIENT_EMAIL }}
#     #     FIREBASE_SECRETS_CLIENT_ID: ${{ secrets.FIREBASE_SECRETS_CLIENT_ID }}
#     #     FIREBASE_SECRETS_AUTH_URI: ${{ secrets.FIREBASE_SECRETS_AUTH_URI }}
#     #     FIREBASE_SECRETS_TOKEN_URI: ${{ secrets.FIREBASE_SECRETS_TOKEN_URI }}
#     #     FIREBASE_SECRETS_AUTH_PROVIDER_X509_CERT_URL: ${{ secrets.FIREBASE_SECRETS_AUTH_PROVIDER_X509_CERT_URL }}
#     #     FIREBASE_SECRETS_CLIENT_X509_CERT_URL: ${{ secrets.FIREBASE_SECRETS_CLIENT_X509_CERT_URL }}
#     script:
#         - cd ./deployments/firebase/functions
#         - echo -e "//npm.pkg.github.com/:_authToken=${{ secrets.GITHUB_TOKEN }}\n@feuertiger:registry=https://npm.pkg.github.com/feuertiger\npackage-lock=false" > .npmrc
#         - npm i --no-package-lock
#         - npm run createSecrets
#         - npm run deploy:ci
