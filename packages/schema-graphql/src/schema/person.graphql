enum Sex {
    MALE
    FEMAL
    DIVERSE
}

type Person implements Node {
    id: ID!
    firstname: String!
    lastname: String!
    sex: Sex
    avatar: String
    address: Address
    birthName: String
    placeOfBirth: String
    dateOfBirth: DateTime!
    grade: Grade
    actualMembership: Membership
    memberships: [Membership]
    promotions: [Promotion]
    exercisesParticipated: [Exercise]
    exercisesNotParticipated: [Exercise]
    exercisesLeaded: [Exercise]
}

input PersonUpdate {
    id: ID!
    firstname: String
    lastname: String
    sex: Sex
    avatar: String
    address: AddressUpdate
    birthName: String
    placeOfBirth: String
    dateOfBirth: DateTime
}

input PersonExerciseConnectionUpdate {
    id: ID!
    changes: [ConnectionUpdate!]!
}

type PersonEdge implements Edge {
    node: Person!
    cursor: String!
}

type PersonConnection implements Connection {
    totalCount: Int!
    edges: [PersonEdge!]!
    pageInfo: PageInfo!
}

extend type Query {
    allPersons(query: _Query): PersonConnection
}

extend type Mutation {
    createPerson(person: PersonUpdate!): Person
    updatePerson(person: PersonUpdate!): Person
    updatePersonExercisesConnection(
        update: PersonExerciseConnectionUpdate!
    ): Person
}
